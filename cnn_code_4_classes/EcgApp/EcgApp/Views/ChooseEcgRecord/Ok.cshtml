@{
    ViewData["Title"] = "Ok";
}
<html>
<head>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>
    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" />
</head>
<body>
    <div style="float:right;">
        <div class="btn-group" style="width:100%">
            <button OnClick="buttonN();" style="width:25%">N</button>
            <button OnClick="buttonRBBB();" style="width:25%">RBBB</button>
            <button OnClick="buttonB();" style="width:25%">B</button>
            <button OnClick="buttonAFIB();" style="width:25%">AFIB</button>
        </div>

        <div class="sectorsWrapper" style="height: 400px; width: 300px; overflow-x:auto; ">
            <div id="sectors" style="float:initial; height: 400px; width: 100px;">
                <table border='1' id="mytable" style="width: 280px;">
                    <thead style="width: 280px;">
                        <tr>Pathology coordinates</tr>
                    </thead>
                    <tbody id="tb0">
                    </tbody>               
                </table>
            </div>
        </div>
    </div>
    <div class="chartWrapper" style="height: 410px; width: 800px; overflow-x:auto; position:relative;">
        <div id="chartContainer" style="height: 390px; width: 9000px;"></div>
    </div>

    <div id="patologies">
        <ul>
            <li style="display: inline;">Normal sinus rhythm:&nbsp @Html.Raw(Json.Serialize(ViewBag.N)) &nbsp&nbsp&nbsp</li>
            <li style="display: inline;">Normal sinus rhythm with right bundle branch block:&nbsp @Html.Raw(Json.Serialize(ViewBag.RBBB)) &nbsp&nbsp&nbsp</li>
        </ul>
        <ul>
            <li style="display: inline;">Ventricular bigeminy:&nbsp @Html.Raw(Json.Serialize(ViewBag.B)) &nbsp&nbsp&nbsp</li>
            <li style="display: inline;">Atrial fibrillation:&nbsp @Html.Raw(Json.Serialize(ViewBag.AFIB)) &nbsp&nbsp&nbsp</li>
        </ul>
    </div>

    <script>

        var xAxisStripLinesArray = [];
        var yAxisStripLinesArray = [];
        var dps = [];

        var dataPointsArray = @Html.Raw(Json.Serialize(ViewBag.VALUES));
        var results_temp = @Html.Raw(Json.Serialize(ViewBag.RESULT));

        var chart = new CanvasJS.Chart("chartContainer",
            {
                zoomEnabled: true,
                title: {
                    text: "ECG Report",
                },
                subtitles: [{
                    text: "ECG Report from record № " + results_temp,
                    horizontalAlign: "left",
                },
                {
                    text: "Duration: 30 min ",
                    horizontalAlign: "left",
                },
                ],
                axisY: {
                    stripLines: yAxisStripLinesArray,
                    gridThickness: 2,
                    gridColor: "#DC74A5",
                    lineColor: "#DC74A5",
                    tickColor: "#DC74A5",
                    labelFontColor: "#DC74A5",
                },
                axisX: {
                    stripLines: xAxisStripLinesArray,
                    gridThickness: 2,
                    gridColor: "#DC74A5",
                    lineColor: "#DC74A5",
                    tickColor: "#DC74A5",
                    labelFontColor: "#DC74A5",
                },
                data: [
                    {
                        //type: "spline",
                        type: "line",
                        color: "black",
                        dataPoints: dps
                    }
                ]
            });

        addDataPointsAndStripLines();
        chart.render();

        function addDataPointsAndStripLines() {
            //dataPoints
            for (var i = 0; i < dataPointsArray.length; i += 100)
            {
                dps.push({x: i * 1, y: dataPointsArray[i] });
            }
            //StripLines
            for (var i = 0; i < 3000; i = i + 100) {
                if (i % 1000 != 0)
                    yAxisStripLinesArray.push({ value: i, thickness: 0.7, color: "#DC74A5" });
            }
            for (var i = 0; i < dataPointsArray.length; i = i + 100)
            {
                if (i % 200 != 0)
                    xAxisStripLinesArray.push({ value: i, thickness: 0.7, color: "#DC74A5" });
            }
        }

        var listN = @Html.Raw(Json.Serialize(ViewBag.listN));
        var listRBBB = @Html.Raw(Json.Serialize(ViewBag.listRBBB));
        var listB = @Html.Raw(Json.Serialize(ViewBag.listB));
        var listAFIB = @Html.Raw(Json.Serialize(ViewBag.listAFIB));

        function buttonN()
        {        
            var tabBody = document.getElementById("tb0");  
            $("tbody").children().remove();

                for (var i = 0; i < listN.length; i++) {
                    row = document.createElement("tr");
                    cell = document.createElement("td");
                    textnode = document.createTextNode(listN[i]);
                    cell.appendChild(textnode);
                    row.appendChild(cell);
                    tabBody.appendChild(row);
                }
        }

        function buttonRBBB()
        {
           
            var tabBody = document.getElementById("tb0");
            $("tbody").children().remove();

                for (var i = 0; i < listRBBB.length; i++) {
                    row = document.createElement("tr");
                    cell = document.createElement("td");
                    textnode = document.createTextNode(listRBBB[i]);
                    cell.appendChild(textnode);
                    row.appendChild(cell);
                    tabBody.appendChild(row);
                }
        }

        function buttonB()
        {
          
            var tabBody = document.getElementById("tb0");
            $("tbody").children().remove();

                for (var i = 0; i < listB.length; i++) {
                    row = document.createElement("tr");
                    cell = document.createElement("td");
                    textnode = document.createTextNode(listB[i]);
                    cell.appendChild(textnode);
                    row.appendChild(cell);
                    tabBody.appendChild(row);
                }
        }

        function buttonAFIB()
        {
           
            var tabBody = document.getElementById("tb0"); 
            $("tbody").children().remove();

                for (var i = 0; i < listAFIB.length; i++) {
                    row = document.createElement("tr");
                    cell = document.createElement("td");
                    textnode = document.createTextNode(listAFIB[i]);
                    cell.appendChild(textnode);
                    row.appendChild(cell);
                    tabBody.appendChild(row);
                }
        }

    </script>
</body>
</html>
